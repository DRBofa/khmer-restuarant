{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/vireak/Desktop/meteor/app/node_modules/vue-select/src/components/Select.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions",["flow",{}],"nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}]],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"sourceFileName":"/home/vireak/Desktop/meteor/app/node_modules/vue-select/src/components/Select.vue","filename":"/home/vireak/Desktop/meteor/app/node_modules/vue-select/src/components/Select.vue","passPerPreset":false,"envName":"development","cwd":"/home/vireak/Desktop/meteor/app","root":"/home/vireak/Desktop/meteor/app","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.7.6","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/home/vireak/Desktop/meteor/app/node_modules/vue-select/src/components/Select.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/vireak/Desktop/meteor/app/node_modules/vue-select/src/components/Select.vue"}},"code":"var _toConsumableArray;\n\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\n\nvar _typeof;\n\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 1);\n\nvar _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 2);\nvar pointerScroll;\nmodule.link(\"../mixins/pointerScroll\", {\n  \"default\": function (v) {\n    pointerScroll = v;\n  }\n}, 0);\nvar typeAheadPointer;\nmodule.link(\"../mixins/typeAheadPointer\", {\n  \"default\": function (v) {\n    typeAheadPointer = v;\n  }\n}, 1);\nvar ajax;\nmodule.link(\"../mixins/ajax\", {\n  \"default\": function (v) {\n    ajax = v;\n  }\n}, 2);\nvar childComponents;\nmodule.link(\"./childComponents\", {\n  \"default\": function (v) {\n    childComponents = v;\n  }\n}, 3);\nmodule.exportDefault({\n  components: _objectSpread({}, childComponents),\n  mixins: [pointerScroll, typeAheadPointer, ajax],\n  props: {\n    /**\n     * Contains the currently selected value. Very similar to a\n     * `value` attribute on an <input>. You can listen for changes\n     * using 'change' event using v-on\n     * @type {Object||String||null}\n     */\n    value: {},\n\n    /**\n     * An object with any custom components that you'd like to overwrite\n     * the default implementation of in your app. The keys in this object\n     * will be merged with the defaults.\n     * @see https://vue-select.org/guide/components.html\n     * @type {Function}\n     */\n    components: {\n      type: Object,\n      \"default\": function () {\n        return {};\n      }\n    },\n\n    /**\n     * An array of strings or objects to be used as dropdown choices.\n     * If you are using an array of objects, vue-select will look for\n     * a `label` key (ex. [{label: 'This is Foo', value: 'foo'}]). A\n     * custom label key can be set with the `label` prop.\n     * @type {Array}\n     */\n    options: {\n      type: Array,\n      \"default\": function () {\n        return [];\n      }\n    },\n\n    /**\n     * Disable the entire component.\n     * @type {Boolean}\n     */\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n\n    /**\n     * Can the user clear the selected property.\n     * @type {Boolean}\n     */\n    clearable: {\n      type: Boolean,\n      \"default\": true\n    },\n\n    /**\n     * Enable/disable filtering the options.\n     * @type {Boolean}\n     */\n    searchable: {\n      type: Boolean,\n      \"default\": true\n    },\n\n    /**\n     * Equivalent to the `multiple` attribute on a `<select>` input.\n     * @type {Boolean}\n     */\n    multiple: {\n      type: Boolean,\n      \"default\": false\n    },\n\n    /**\n     * Equivalent to the `placeholder` attribute on an `<input>`.\n     * @type {String}\n     */\n    placeholder: {\n      type: String,\n      \"default\": ''\n    },\n\n    /**\n     * Sets a Vue transition property on the `.vs__dropdown-menu`.\n     * @type {String}\n     */\n    transition: {\n      type: String,\n      \"default\": 'vs__fade'\n    },\n\n    /**\n     * Enables/disables clearing the search text when an option is selected.\n     * @type {Boolean}\n     */\n    clearSearchOnSelect: {\n      type: Boolean,\n      \"default\": true\n    },\n\n    /**\n     * Close a dropdown when an option is chosen. Set to false to keep the dropdown\n     * open (useful when combined with multi-select, for example)\n     * @type {Boolean}\n     */\n    closeOnSelect: {\n      type: Boolean,\n      \"default\": true\n    },\n\n    /**\n     * Tells vue-select what key to use when generating option\n     * labels when each `option` is an object.\n     * @type {String}\n     */\n    label: {\n      type: String,\n      \"default\": 'label'\n    },\n\n    /**\n     * Value of the 'autocomplete' field of the input\n     * element.\n     * @type {String}\n     */\n    autocomplete: {\n      type: String,\n      \"default\": 'off'\n    },\n\n    /**\n     * When working with objects, the reduce\n     * prop allows you to transform a given\n     * object to only the information you\n     * want passed to a v-model binding\n     * or @input event.\n     */\n    reduce: {\n      type: Function,\n      \"default\": function (option) {\n        return option;\n      }\n    },\n\n    /**\n     * Decides whether an option is selectable or not. Not selectable options\n     * are displayed but disabled and cannot be selected.\n     *\n     * @type {Function}\n     * @since 3.3.0\n     * @param {Object|String} option\n     * @return {Boolean}\n     */\n    selectable: {\n      type: Function,\n      \"default\": function (option) {\n        return true;\n      }\n    },\n\n    /**\n     * Callback to generate the label text. If {option}\n     * is an object, returns option[this.label] by default.\n     *\n     * Label text is used for filtering comparison and\n     * displaying. If you only need to adjust the\n     * display, you should use the `option` and\n     * `selected-option` slots.\n     *\n     * @type {Function}\n     * @param  {Object || String} option\n     * @return {String}\n     */\n    getOptionLabel: {\n      type: Function,\n      \"default\": function (option) {\n        if (_typeof(option) === 'object') {\n          if (!option.hasOwnProperty(this.label)) {\n            return console.warn(\"[vue-select warn]: Label key \\\"option.\" + this.label + \"\\\" does not\" + (\" exist in options object \" + JSON.stringify(option) + \".\\n\") + 'https://vue-select.org/api/props.html#getoptionlabel');\n          }\n\n          return option[this.label];\n        }\n\n        return option;\n      }\n    },\n\n    /**\n     * Callback to get an option key. If {option}\n     * is an object and has an {id}, returns {option.id}\n     * by default, otherwise tries to serialize {option}\n     * to JSON.\n     *\n     * The key must be unique for an option.\n     *\n     * @type {Function}\n     * @param  {Object || String} option\n     * @return {String}\n     */\n    getOptionKey: {\n      type: Function,\n      \"default\": function (option) {\n        if (_typeof(option) === 'object' && option.id) {\n          return option.id;\n        } else {\n          try {\n            return JSON.stringify(option);\n          } catch (e) {\n            return console.warn(\"[vue-select warn]: Could not stringify option \" + \"to generate unique key. Please provide'getOptionKey' prop \" + \"to return a unique key for each option.\\n\" + 'https://vue-select.org/api/props.html#getoptionkey');\n          }\n        }\n      }\n    },\n\n    /**\n     * Select the current value if selectOnTab is enabled\n     * @deprecated since 3.3\n     */\n    onTab: {\n      type: Function,\n      \"default\": function () {\n        if (this.selectOnTab && !this.isComposing) {\n          this.typeAheadSelect();\n        }\n      }\n    },\n\n    /**\n     * Enable/disable creating options from searchEl.\n     * @type {Boolean}\n     */\n    taggable: {\n      type: Boolean,\n      \"default\": false\n    },\n\n    /**\n     * Set the tabindex for the input field.\n     * @type {Number}\n     */\n    tabindex: {\n      type: Number,\n      \"default\": null\n    },\n\n    /**\n     * When true, newly created tags will be added to\n     * the options list.\n     * @type {Boolean}\n     */\n    pushTags: {\n      type: Boolean,\n      \"default\": false\n    },\n\n    /**\n     * When true, existing options will be filtered\n     * by the search text. Should not be used in conjunction\n     * with taggable.\n     * @type {Boolean}\n     */\n    filterable: {\n      type: Boolean,\n      \"default\": true\n    },\n\n    /**\n     * Callback to determine if the provided option should\n     * match the current search text. Used to determine\n     * if the option should be displayed.\n     * @type   {Function}\n     * @param  {Object || String} option\n     * @param  {String} label\n     * @param  {String} search\n     * @return {Boolean}\n     */\n    filterBy: {\n      type: Function,\n      \"default\": function (option, label, search) {\n        return (label || '').toLowerCase().indexOf(search.toLowerCase()) > -1;\n      }\n    },\n\n    /**\n     * Callback to filter results when search text\n     * is provided. Default implementation loops\n     * each option, and returns the result of\n     * this.filterBy.\n     * @type   {Function}\n     * @param  {Array} list of options\n     * @param  {String} search text\n     * @param  {Object} vSelect instance\n     * @return {Boolean}\n     */\n    filter: {\n      \"type\": Function,\n      \"default\": function (options, search) {\n        var _this = this;\n\n        return options.filter(function (option) {\n          var label = _this.getOptionLabel(option);\n\n          if (typeof label === 'number') {\n            label = label.toString();\n          }\n\n          return _this.filterBy(option, label, search);\n        });\n      }\n    },\n\n    /**\n     * User defined function for adding Options\n     * @type {Function}\n     */\n    createOption: {\n      type: Function,\n      \"default\": function (option) {\n        var _ref;\n\n        return _typeof(this.optionList[0]) === 'object' ? (_ref = {}, _ref[this.label] = option, _ref) : option;\n      }\n    },\n\n    /**\n     * When false, updating the options will not reset the selected value. Accepts\n     * a `boolean` or `function` that returns a `boolean`. If defined as a function,\n     * it will receive the params listed below.\n     *\n     * @since 3.4 - Type changed to {Boolean|Function}\n     *\n     * @type {Boolean|Function}\n     * @param {Array} newOptions\n     * @param {Array} oldOptions\n     * @param {Array} selectedValue\n     */\n    resetOnOptionsChange: {\n      \"default\": false,\n      validator: function (value) {\n        return ['function', 'boolean'].includes(_typeof(value));\n      }\n    },\n\n    /**\n     * If search text should clear on blur\n     * @return {Boolean} True when single and clearSearchOnSelect\n     */\n    clearSearchOnBlur: {\n      type: Function,\n      \"default\": function (_ref2) {\n        var clearSearchOnSelect = _ref2.clearSearchOnSelect,\n            multiple = _ref2.multiple;\n        return clearSearchOnSelect && !multiple;\n      }\n    },\n\n    /**\n     * Disable the dropdown entirely.\n     * @type {Boolean}\n     */\n    noDrop: {\n      type: Boolean,\n      \"default\": false\n    },\n\n    /**\n     * Sets the id of the input element.\n     * @type {String}\n     * @default {null}\n     */\n    inputId: {\n      type: String\n    },\n\n    /**\n     * Sets RTL support. Accepts 'ltr', 'rtl', 'auto'.\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir\n     * @type {String}\n     * @default 'auto'\n     */\n    dir: {\n      type: String,\n      \"default\": 'auto'\n    },\n\n    /**\n     * When true, hitting the 'tab' key will select the current select value\n     * @type {Boolean}\n     * @deprecated since 3.3 - use selectOnKeyCodes instead\n     */\n    selectOnTab: {\n      type: Boolean,\n      \"default\": false\n    },\n\n    /**\n     * Keycodes that will select the current option.\n     * @type Array\n     */\n    selectOnKeyCodes: {\n      type: Array,\n      \"default\": function () {\n        return [13];\n      }\n    },\n\n    /**\n     * Query Selector used to find the search input\n     * when the 'search' scoped slot is used.\n     *\n     * Must be a valid CSS selector string.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n     * @type {String}\n     */\n    searchInputQuerySelector: {\n      type: String,\n      \"default\": '[type=search]'\n    },\n\n    /**\n     * Used to modify the default keydown events map\n     * for the search input. Can be used to implement\n     * custom behaviour for key presses.\n     */\n    mapKeydown: {\n      type: Function,\n\n      /**\n       * @param map {Object}\n       * @param vm {VueSelect}\n       * @return {Object}\n       */\n      \"default\": function (map, vm) {\n        return map;\n      }\n    }\n  },\n  data: function () {\n    return {\n      search: '',\n      open: false,\n      isComposing: false,\n      pushedTags: [],\n      _value: [] // Internal value managed by Vue Select if no `value` prop is passed\n\n    };\n  },\n  watch: {\n    /**\n     * Maybe reset the value\n     * when options change.\n     * Make sure selected option\n     * is correct.\n     * @return {[type]} [description]\n     */\n    options: function (newOptions, oldOptions) {\n      var _this2 = this;\n\n      var shouldReset = function () {\n        return typeof _this2.resetOnOptionsChange === 'function' ? _this2.resetOnOptionsChange(newOptions, oldOptions, _this2.selectedValue) : _this2.resetOnOptionsChange;\n      };\n\n      if (!this.taggable && shouldReset()) {\n        this.clearSelection();\n      }\n\n      if (this.value && this.isTrackingValues) {\n        this.setInternalValueFromOptions(this.value);\n      }\n    },\n\n    /**\n     * Make sure to update internal\n     * value if prop changes outside\n     */\n    value: function (val) {\n      if (this.isTrackingValues) {\n        this.setInternalValueFromOptions(val);\n      }\n    },\n\n    /**\n     * Always reset the value when\n     * the multiple prop changes.\n     * @param  {Boolean} isMultiple\n     * @return {void}\n     */\n    multiple: function () {\n      this.clearSelection();\n    }\n  },\n  created: function () {\n    this.mutableLoading = this.loading;\n\n    if (typeof this.value !== \"undefined\" && this.isTrackingValues) {\n      this.setInternalValueFromOptions(this.value);\n    }\n\n    this.$on('option:created', this.maybePushTag);\n  },\n  methods: {\n    /**\n     * Make sure tracked value is\n     * one option if possible.\n     * @param  {Object|String} value\n     * @return {void}\n     */\n    setInternalValueFromOptions: function (value) {\n      var _this3 = this;\n\n      if (Array.isArray(value)) {\n        this.$data._value = value.map(function (val) {\n          return _this3.findOptionFromReducedValue(val);\n        });\n      } else {\n        this.$data._value = this.findOptionFromReducedValue(value);\n      }\n    },\n\n    /**\n     * Select a given option.\n     * @param  {Object|String} option\n     * @return {void}\n     */\n    select: function (option) {\n      if (!this.isOptionSelected(option)) {\n        if (this.taggable && !this.optionExists(option)) {\n          option = this.createOption(option);\n          this.$emit('option:created', option);\n        }\n\n        if (this.multiple) {\n          option = this.selectedValue.concat(option);\n        }\n\n        this.updateValue(option);\n      }\n\n      this.onAfterSelect(option);\n    },\n\n    /**\n     * De-select a given option.\n     * @param  {Object|String} option\n     * @return {void}\n     */\n    deselect: function (option) {\n      var _this4 = this;\n\n      this.updateValue(this.selectedValue.filter(function (val) {\n        return !_this4.optionComparator(val, option);\n      }));\n    },\n\n    /**\n     * Clears the currently selected value(s)\n     * @return {void}\n     */\n    clearSelection: function () {\n      this.updateValue(this.multiple ? [] : null);\n    },\n\n    /**\n     * Called from this.select after each selection.\n     * @param  {Object|String} option\n     * @return {void}\n     */\n    onAfterSelect: function (option) {\n      if (this.closeOnSelect) {\n        this.open = !this.open;\n        this.searchEl.blur();\n      }\n\n      if (this.clearSearchOnSelect) {\n        this.search = '';\n      }\n    },\n\n    /**\n     * Accepts a selected value, updates local\n     * state when required, and triggers the\n     * input event.\n     *\n     * @emits input\n     * @param value\n     */\n    updateValue: function (value) {\n      var _this5 = this;\n\n      if (this.isTrackingValues) {\n        // Vue select has to manage value\n        this.$data._value = value;\n      }\n\n      if (value !== null) {\n        if (Array.isArray(value)) {\n          value = value.map(function (val) {\n            return _this5.reduce(val);\n          });\n        } else {\n          value = this.reduce(value);\n        }\n      }\n\n      this.$emit('input', value);\n    },\n\n    /**\n     * Toggle the visibility of the dropdown menu.\n     * @param  {Event} e\n     * @return {void}\n     */\n    toggleDropdown: function (_ref3) {\n      var target = _ref3.target;\n      //  don't react to click on deselect/clear buttons,\n      //  they dropdown state will be set in their click handlers\n      var ignoredButtons = [].concat(_toConsumableArray(this.$refs['deselectButtons'] || []), _toConsumableArray([this.$refs['clearButton']] || []));\n\n      if (ignoredButtons.some(function (ref) {\n        return ref.contains(target) || ref === target;\n      })) {\n        return;\n      }\n\n      if (this.open) {\n        this.searchEl.blur();\n      } else if (!this.disabled) {\n        this.open = true;\n        this.searchEl.focus();\n      }\n    },\n\n    /**\n     * Check if the given option is currently selected.\n     * @param  {Object|String}  option\n     * @return {Boolean}        True when selected | False otherwise\n     */\n    isOptionSelected: function (option) {\n      var _this6 = this;\n\n      return this.selectedValue.some(function (value) {\n        return _this6.optionComparator(value, option);\n      });\n    },\n\n    /**\n     * Determine if two option objects are matching.\n     *\n     * @param value {Object}\n     * @param option {Object}\n     * @returns {boolean}\n     */\n    optionComparator: function (value, option) {\n      if (_typeof(value) !== 'object' && _typeof(option) !== 'object') {\n        // Comparing primitives\n        if (value === option) {\n          return true;\n        }\n      } else {\n        // Comparing objects\n        if (value === this.reduce(option)) {\n          return true;\n        }\n\n        if (this.getOptionLabel(value) === this.getOptionLabel(option) || this.getOptionLabel(value) === option) {\n          return true;\n        }\n\n        if (this.reduce(value) === this.reduce(option)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Finds an option from this.options\n     * where a reduced value matches\n     * the passed in value.\n     *\n     * @param value {Object}\n     * @returns {*}\n     */\n    findOptionFromReducedValue: function (value) {\n      var _this7 = this;\n\n      return this.options.find(function (option) {\n        return JSON.stringify(_this7.reduce(option)) === JSON.stringify(value);\n      }) || value;\n    },\n\n    /**\n     * 'Private' function to close the search options\n     * @emits  {search:blur}\n     * @returns {void}\n     */\n    closeSearchOptions: function () {\n      this.open = false;\n      this.$emit('search:blur');\n    },\n\n    /**\n     * Delete the value on Delete keypress when there is no\n     * text in the search input, & there's tags to delete\n     * @return {this.value}\n     */\n    maybeDeleteValue: function () {\n      if (!this.searchEl.value.length && this.selectedValue && this.clearable) {\n        var value = null;\n\n        if (this.multiple) {\n          value = _toConsumableArray(this.selectedValue.slice(0, this.selectedValue.length - 1));\n        }\n\n        this.updateValue(value);\n      }\n    },\n\n    /**\n     * Determine if an option exists\n     * within this.optionList array.\n     *\n     * @param  {Object || String} option\n     * @return {boolean}\n     */\n    optionExists: function (option) {\n      var _this8 = this;\n\n      return this.optionList.some(function (opt) {\n        if (_typeof(opt) === 'object' && _this8.getOptionLabel(opt) === option) {\n          return true;\n        } else if (opt === option) {\n          return true;\n        }\n\n        return false;\n      });\n    },\n\n    /**\n     * Ensures that options are always\n     * passed as objects to scoped slots.\n     * @param option\n     * @return {*}\n     */\n    normalizeOptionForSlot: function (option) {\n      var _ref4;\n\n      return _typeof(option) === 'object' ? option : (_ref4 = {}, _ref4[this.label] = option, _ref4);\n    },\n\n    /**\n     * If push-tags is true, push the\n     * given option to `this.pushedTags`.\n     *\n     * @param  {Object || String} option\n     * @return {void}\n     */\n    maybePushTag: function (option) {\n      if (this.pushTags) {\n        this.pushedTags.push(option);\n      }\n    },\n\n    /**\n     * If there is any text in the search input, remove it.\n     * Otherwise, blur the search input to close the dropdown.\n     * @return {void}\n     */\n    onEscape: function () {\n      if (!this.search.length) {\n        this.searchEl.blur();\n      } else {\n        this.search = '';\n      }\n    },\n\n    /**\n     * Close the dropdown on blur.\n     * @emits  {search:blur}\n     * @return {void}\n     */\n    onSearchBlur: function () {\n      if (this.mousedown && !this.searching) {\n        this.mousedown = false;\n      } else {\n        var clearSearchOnSelect = this.clearSearchOnSelect,\n            multiple = this.multiple;\n\n        if (this.clearSearchOnBlur({\n          clearSearchOnSelect: clearSearchOnSelect,\n          multiple: multiple\n        })) {\n          this.search = '';\n        }\n\n        this.closeSearchOptions();\n        return;\n      } // Fixed bug where no-options message could not be closed\n\n\n      if (this.search.length === 0 && this.options.length === 0) {\n        this.closeSearchOptions();\n        return;\n      }\n    },\n\n    /**\n     * Open the dropdown on focus.\n     * @emits  {search:focus}\n     * @return {void}\n     */\n    onSearchFocus: function () {\n      this.open = true;\n      this.$emit('search:focus');\n    },\n\n    /**\n     * Event-Handler to help workaround IE11 (probably fixes 10 as well)\n     * firing a `blur` event when clicking\n     * the dropdown's scrollbar, causing it\n     * to collapse abruptly.\n     * @see https://github.com/sagalbot/vue-select/issues/106\n     * @return {void}\n     */\n    onMousedown: function () {\n      this.mousedown = true;\n    },\n\n    /**\n     * Event-Handler to help workaround IE11 (probably fixes 10 as well)\n     * @see https://github.com/sagalbot/vue-select/issues/106\n     * @return {void}\n     */\n    onMouseUp: function () {\n      this.mousedown = false;\n    },\n\n    /**\n     * Search <input> KeyBoardEvent handler.\n     * @param e {KeyboardEvent}\n     * @return {Function}\n     */\n    onSearchKeyDown: function (e) {\n      var _this9 = this;\n\n      var preventAndSelect = function (e) {\n        e.preventDefault();\n        return !_this9.isComposing && _this9.typeAheadSelect();\n      };\n\n      var defaults = {\n        //  delete\n        8: function (e) {\n          return _this9.maybeDeleteValue();\n        },\n        //  tab\n        9: function (e) {\n          return _this9.onTab();\n        },\n        //  esc\n        27: function (e) {\n          return _this9.onEscape();\n        },\n        //  up.prevent\n        38: function (e) {\n          e.preventDefault();\n          return _this9.typeAheadUp();\n        },\n        //  down.prevent\n        40: function (e) {\n          e.preventDefault();\n          return _this9.typeAheadDown();\n        }\n      };\n      this.selectOnKeyCodes.forEach(function (keyCode) {\n        return defaults[keyCode] = preventAndSelect;\n      });\n      var handlers = this.mapKeydown(defaults, this);\n\n      if (typeof handlers[e.keyCode] === 'function') {\n        return handlers[e.keyCode](e);\n      }\n    }\n  },\n  computed: {\n    /**\n     * Determine if the component needs to\n     * track the state of values internally.\n     * @return {boolean}\n     */\n    isTrackingValues: function () {\n      return typeof this.value === 'undefined' || this.$options.propsData.hasOwnProperty('reduce');\n    },\n\n    /**\n     * The options that are currently selected.\n     * @return {Array}\n     */\n    selectedValue: function () {\n      var value = this.value;\n\n      if (this.isTrackingValues) {\n        // Vue select has to manage value internally\n        value = this.$data._value;\n      }\n\n      if (value) {\n        return [].concat(value);\n      }\n\n      return [];\n    },\n\n    /**\n     * The options available to be chosen\n     * from the dropdown, including any\n     * tags that have been pushed.\n     *\n     * @return {Array}\n     */\n    optionList: function () {\n      return this.options.concat(this.pushedTags);\n    },\n\n    /**\n     * Find the search input DOM element.\n     * @returns {HTMLInputElement}\n     */\n    searchEl: function () {\n      return !!this.$scopedSlots['search'] ? this.$refs.selectedOptions.querySelector(this.searchInputQuerySelector) : this.$refs.search;\n    },\n\n    /**\n     * The object to be bound to the $slots.search scoped slot.\n     * @returns {Object}\n     */\n    scope: function () {\n      var _this10 = this;\n\n      return {\n        search: {\n          attributes: {\n            'disabled': this.disabled,\n            'placeholder': this.searchPlaceholder,\n            'tabindex': this.tabindex,\n            'readonly': !this.searchable,\n            'id': this.inputId,\n            'aria-expanded': this.dropdownOpen,\n            'aria-label': 'Search for option',\n            'ref': 'search',\n            'role': 'combobox',\n            'type': 'search',\n            'autocomplete': this.autocomplete,\n            'value': this.search\n          },\n          events: {\n            'compositionstart': function () {\n              return _this10.isComposing = true;\n            },\n            'compositionend': function () {\n              return _this10.isComposing = false;\n            },\n            'keydown': this.onSearchKeyDown,\n            'blur': this.onSearchBlur,\n            'focus': this.onSearchFocus,\n            'input': function (e) {\n              return _this10.search = e.target.value;\n            }\n          }\n        },\n        spinner: {\n          loading: this.mutableLoading\n        },\n        openIndicator: {\n          attributes: {\n            'ref': 'openIndicator',\n            'role': 'presentation',\n            'class': 'vs__open-indicator'\n          }\n        }\n      };\n    },\n\n    /**\n     * Returns an object containing the child components\n     * that will be used throughout the component. The\n     * `component` prop can be used to overwrite the defaults.\n     *\n     * @return {Object}\n     */\n    childComponents: function () {\n      return _objectSpread({}, childComponents, {}, this.components);\n    },\n\n    /**\n     * Holds the current state of the component.\n     * @return {Object}\n     */\n    stateClasses: function () {\n      return {\n        'vs--open': this.dropdownOpen,\n        'vs--single': !this.multiple,\n        'vs--searching': this.searching && !this.noDrop,\n        'vs--searchable': this.searchable && !this.noDrop,\n        'vs--unsearchable': !this.searchable,\n        'vs--loading': this.mutableLoading,\n        'vs--disabled': this.disabled\n      };\n    },\n\n    /**\n     * Return the current state of the\n     * search input\n     * @return {Boolean} True if non empty value\n     */\n    searching: function () {\n      return !!this.search;\n    },\n\n    /**\n     * Return the current state of the\n     * dropdown menu.\n     * @return {Boolean} True if open\n     */\n    dropdownOpen: function () {\n      return this.noDrop ? false : this.open && !this.mutableLoading;\n    },\n\n    /**\n     * Return the placeholder string if it's set\n     * & there is no value selected.\n     * @return {String} Placeholder text\n     */\n    searchPlaceholder: function () {\n      if (this.isValueEmpty && this.placeholder) {\n        return this.placeholder;\n      }\n    },\n\n    /**\n     * The currently displayed options, filtered\n     * by the search elements value. If tagging\n     * true, the search text will be prepended\n     * if it doesn't already exist.\n     *\n     * @return {array}\n     */\n    filteredOptions: function () {\n      var optionList = [].concat(this.optionList);\n\n      if (!this.filterable && !this.taggable) {\n        return optionList;\n      }\n\n      var options = this.search.length ? this.filter(optionList, this.search, this) : optionList;\n\n      if (this.taggable && this.search.length && !this.optionExists(this.search)) {\n        options.unshift(this.search);\n      }\n\n      return options;\n    },\n\n    /**\n     * Check if there aren't any options selected.\n     * @return {Boolean}\n     */\n    isValueEmpty: function () {\n      return this.selectedValue.length === 0;\n    },\n\n    /**\n     * Determines if the clear button should be displayed.\n     * @return {Boolean}\n     */\n    showClearButton: function () {\n      return !this.multiple && this.clearable && !this.open && !this.isValueEmpty;\n    }\n  }\n});","map":{"version":3,"sources":["/home/vireak/Desktop/meteor/app/node_modules/vue-select/src/components/Select.vue"],"names":["_toConsumableArray","module","link","default","v","_typeof","_objectSpread","pointerScroll","typeAheadPointer","ajax","childComponents","exportDefault","components","mixins","props","value","type","Object","options","Array","disabled","Boolean","clearable","searchable","multiple","placeholder","String","transition","clearSearchOnSelect","closeOnSelect","label","autocomplete","reduce","Function","option","selectable","getOptionLabel","hasOwnProperty","console","warn","JSON","stringify","getOptionKey","id","e","onTab","selectOnTab","isComposing","typeAheadSelect","taggable","tabindex","Number","pushTags","filterable","filterBy","search","toLowerCase","indexOf","filter","toString","createOption","optionList","resetOnOptionsChange","validator","includes","clearSearchOnBlur","noDrop","inputId","dir","selectOnKeyCodes","searchInputQuerySelector","mapKeydown","map","vm","data","open","pushedTags","_value","watch","newOptions","oldOptions","shouldReset","selectedValue","clearSelection","isTrackingValues","setInternalValueFromOptions","val","created","mutableLoading","loading","$on","maybePushTag","methods","isArray","$data","findOptionFromReducedValue","select","isOptionSelected","optionExists","$emit","concat","updateValue","onAfterSelect","deselect","optionComparator","searchEl","blur","toggleDropdown","target","ignoredButtons","$refs","some","ref","contains","focus","find","closeSearchOptions","maybeDeleteValue","length","slice","opt","normalizeOptionForSlot","push","onEscape","onSearchBlur","mousedown","searching","onSearchFocus","onMousedown","onMouseUp","onSearchKeyDown","preventAndSelect","preventDefault","defaults","typeAheadUp","typeAheadDown","forEach","keyCode","handlers","computed","$options","propsData","$scopedSlots","selectedOptions","querySelector","scope","attributes","searchPlaceholder","dropdownOpen","events","spinner","openIndicator","stateClasses","isValueEmpty","filteredOptions","unshift","showClearButton"],"mappings":"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","sourcesContent":["\nimport pointerScroll from '../mixins/pointerScroll'\nimport typeAheadPointer from '../mixins/typeAheadPointer'\nimport ajax from '../mixins/ajax'\nimport childComponents from './childComponents';\n\n/**\n * @name VueSelect\n */\nexport default {\n  components: {...childComponents},\n\n  mixins: [pointerScroll, typeAheadPointer, ajax],\n\n  props: {\n    /**\n     * Contains the currently selected value. Very similar to a\n     * `value` attribute on an <input>. You can listen for changes\n     * using 'change' event using v-on\n     * @type {Object||String||null}\n     */\n    value: {},\n\n    /**\n     * An object with any custom components that you'd like to overwrite\n     * the default implementation of in your app. The keys in this object\n     * will be merged with the defaults.\n     * @see https://vue-select.org/guide/components.html\n     * @type {Function}\n     */\n    components: {\n      type: Object,\n      default: () => ({}),\n    },\n\n    /**\n     * An array of strings or objects to be used as dropdown choices.\n     * If you are using an array of objects, vue-select will look for\n     * a `label` key (ex. [{label: 'This is Foo', value: 'foo'}]). A\n     * custom label key can be set with the `label` prop.\n     * @type {Array}\n     */\n    options: {\n      type: Array,\n      default() {\n        return []\n      },\n    },\n\n    /**\n     * Disable the entire component.\n     * @type {Boolean}\n     */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Can the user clear the selected property.\n     * @type {Boolean}\n     */\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Enable/disable filtering the options.\n     * @type {Boolean}\n     */\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Equivalent to the `multiple` attribute on a `<select>` input.\n     * @type {Boolean}\n     */\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Equivalent to the `placeholder` attribute on an `<input>`.\n     * @type {String}\n     */\n    placeholder: {\n      type: String,\n      default: ''\n    },\n\n    /**\n     * Sets a Vue transition property on the `.vs__dropdown-menu`.\n     * @type {String}\n     */\n    transition: {\n      type: String,\n      default: 'vs__fade'\n    },\n\n    /**\n     * Enables/disables clearing the search text when an option is selected.\n     * @type {Boolean}\n     */\n    clearSearchOnSelect: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Close a dropdown when an option is chosen. Set to false to keep the dropdown\n     * open (useful when combined with multi-select, for example)\n     * @type {Boolean}\n     */\n    closeOnSelect: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Tells vue-select what key to use when generating option\n     * labels when each `option` is an object.\n     * @type {String}\n     */\n    label: {\n      type: String,\n      default: 'label'\n    },\n\n    /**\n     * Value of the 'autocomplete' field of the input\n     * element.\n     * @type {String}\n     */\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n\n    /**\n     * When working with objects, the reduce\n     * prop allows you to transform a given\n     * object to only the information you\n     * want passed to a v-model binding\n     * or @input event.\n     */\n    reduce: {\n      type: Function,\n      default: option => option,\n    },\n\n    /**\n     * Decides whether an option is selectable or not. Not selectable options\n     * are displayed but disabled and cannot be selected.\n     *\n     * @type {Function}\n     * @since 3.3.0\n     * @param {Object|String} option\n     * @return {Boolean}\n     */\n    selectable: {\n      type: Function,\n      default: option => true,\n    },\n\n    /**\n     * Callback to generate the label text. If {option}\n     * is an object, returns option[this.label] by default.\n     *\n     * Label text is used for filtering comparison and\n     * displaying. If you only need to adjust the\n     * display, you should use the `option` and\n     * `selected-option` slots.\n     *\n     * @type {Function}\n     * @param  {Object || String} option\n     * @return {String}\n     */\n    getOptionLabel: {\n      type: Function,\n      default(option) {\n        if (typeof option === 'object') {\n          if (!option.hasOwnProperty(this.label)) {\n            return console.warn(\n              `[vue-select warn]: Label key \"option.${this.label}\" does not` +\n              ` exist in options object ${JSON.stringify(option)}.\\n` +\n              'https://vue-select.org/api/props.html#getoptionlabel'\n            )\n          }\n          return option[this.label]\n        }\n        return option;\n      }\n    },\n\n    /**\n     * Callback to get an option key. If {option}\n     * is an object and has an {id}, returns {option.id}\n     * by default, otherwise tries to serialize {option}\n     * to JSON.\n     *\n     * The key must be unique for an option.\n     *\n     * @type {Function}\n     * @param  {Object || String} option\n     * @return {String}\n     */\n    getOptionKey: {\n      type: Function,\n      default(option) {\n        if (typeof option === 'object' && option.id) {\n          return option.id\n        } else {\n          try {\n            return JSON.stringify(option)\n          } catch(e) {\n            return console.warn(\n              `[vue-select warn]: Could not stringify option ` +\n              `to generate unique key. Please provide'getOptionKey' prop ` +\n              `to return a unique key for each option.\\n` +\n              'https://vue-select.org/api/props.html#getoptionkey'\n            );\n          }\n        }\n      }\n    },\n\n    /**\n     * Select the current value if selectOnTab is enabled\n     * @deprecated since 3.3\n     */\n    onTab: {\n      type: Function,\n      default: function () {\n        if (this.selectOnTab && !this.isComposing) {\n          this.typeAheadSelect();\n        }\n      },\n    },\n\n    /**\n     * Enable/disable creating options from searchEl.\n     * @type {Boolean}\n     */\n    taggable: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Set the tabindex for the input field.\n     * @type {Number}\n     */\n    tabindex: {\n      type: Number,\n      default: null\n    },\n\n    /**\n     * When true, newly created tags will be added to\n     * the options list.\n     * @type {Boolean}\n     */\n    pushTags: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * When true, existing options will be filtered\n     * by the search text. Should not be used in conjunction\n     * with taggable.\n     * @type {Boolean}\n     */\n    filterable: {\n      type: Boolean,\n      default: true\n    },\n\n    /**\n     * Callback to determine if the provided option should\n     * match the current search text. Used to determine\n     * if the option should be displayed.\n     * @type   {Function}\n     * @param  {Object || String} option\n     * @param  {String} label\n     * @param  {String} search\n     * @return {Boolean}\n     */\n    filterBy: {\n      type: Function,\n      default(option, label, search) {\n        return (label || '').toLowerCase().indexOf(search.toLowerCase()) > -1\n      }\n    },\n\n    /**\n     * Callback to filter results when search text\n     * is provided. Default implementation loops\n     * each option, and returns the result of\n     * this.filterBy.\n     * @type   {Function}\n     * @param  {Array} list of options\n     * @param  {String} search text\n     * @param  {Object} vSelect instance\n     * @return {Boolean}\n     */\n    filter: {\n      \"type\": Function,\n      default(options, search) {\n        return options.filter((option) => {\n          let label = this.getOptionLabel(option)\n          if (typeof label === 'number') {\n            label = label.toString()\n          }\n          return this.filterBy(option, label, search)\n        });\n      }\n    },\n\n    /**\n     * User defined function for adding Options\n     * @type {Function}\n     */\n    createOption: {\n      type: Function,\n      default (option) {\n        return (typeof this.optionList[0] === 'object') ? {[this.label]: option} : option;\n      },\n    },\n\n    /**\n     * When false, updating the options will not reset the selected value. Accepts\n     * a `boolean` or `function` that returns a `boolean`. If defined as a function,\n     * it will receive the params listed below.\n     *\n     * @since 3.4 - Type changed to {Boolean|Function}\n     *\n     * @type {Boolean|Function}\n     * @param {Array} newOptions\n     * @param {Array} oldOptions\n     * @param {Array} selectedValue\n     */\n    resetOnOptionsChange: {\n      default: false,\n      validator: (value) => ['function', 'boolean'].includes(typeof value)\n    },\n\n    /**\n     * If search text should clear on blur\n     * @return {Boolean} True when single and clearSearchOnSelect\n     */\n    clearSearchOnBlur: {\n      type: Function,\n      default: function ({ clearSearchOnSelect, multiple }) {\n        return clearSearchOnSelect && !multiple\n      }\n    },\n\n    /**\n     * Disable the dropdown entirely.\n     * @type {Boolean}\n     */\n    noDrop: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Sets the id of the input element.\n     * @type {String}\n     * @default {null}\n     */\n    inputId: {\n      type: String\n    },\n\n    /**\n     * Sets RTL support. Accepts 'ltr', 'rtl', 'auto'.\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir\n     * @type {String}\n     * @default 'auto'\n     */\n    dir: {\n      type: String,\n      default: 'auto'\n    },\n\n    /**\n     * When true, hitting the 'tab' key will select the current select value\n     * @type {Boolean}\n     * @deprecated since 3.3 - use selectOnKeyCodes instead\n     */\n    selectOnTab: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * Keycodes that will select the current option.\n     * @type Array\n     */\n    selectOnKeyCodes: {\n      type: Array,\n      default: () => [13],\n    },\n\n    /**\n     * Query Selector used to find the search input\n     * when the 'search' scoped slot is used.\n     *\n     * Must be a valid CSS selector string.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n     * @type {String}\n     */\n    searchInputQuerySelector: {\n      type: String,\n      default: '[type=search]'\n    },\n\n    /**\n     * Used to modify the default keydown events map\n     * for the search input. Can be used to implement\n     * custom behaviour for key presses.\n     */\n    mapKeydown: {\n      type: Function,\n      /**\n       * @param map {Object}\n       * @param vm {VueSelect}\n       * @return {Object}\n       */\n      default: (map, vm) => map,\n    }\n  },\n\n  data() {\n    return {\n      search: '',\n      open: false,\n      isComposing: false,\n      pushedTags: [],\n      _value: [] // Internal value managed by Vue Select if no `value` prop is passed\n    }\n  },\n\n  watch: {\n    /**\n     * Maybe reset the value\n     * when options change.\n     * Make sure selected option\n     * is correct.\n     * @return {[type]} [description]\n     */\n    options (newOptions, oldOptions) {\n      let shouldReset = () => typeof this.resetOnOptionsChange === 'function'\n        ? this.resetOnOptionsChange(newOptions, oldOptions, this.selectedValue)\n        : this.resetOnOptionsChange;\n\n      if (!this.taggable && shouldReset()) {\n        this.clearSelection();\n      }\n\n      if (this.value && this.isTrackingValues) {\n        this.setInternalValueFromOptions(this.value);\n      }\n    },\n\n    /**\n     * Make sure to update internal\n     * value if prop changes outside\n     */\n    value(val) {\n      if (this.isTrackingValues) {\n        this.setInternalValueFromOptions(val)\n      }\n    },\n\n    /**\n     * Always reset the value when\n     * the multiple prop changes.\n     * @param  {Boolean} isMultiple\n     * @return {void}\n     */\n    multiple() {\n      this.clearSelection()\n    }\n  },\n\n  created() {\n    this.mutableLoading = this.loading;\n\n    if (typeof this.value !== \"undefined\" && this.isTrackingValues) {\n      this.setInternalValueFromOptions(this.value)\n    }\n\n    this.$on('option:created', this.maybePushTag)\n  },\n\n  methods: {\n    /**\n     * Make sure tracked value is\n     * one option if possible.\n     * @param  {Object|String} value\n     * @return {void}\n     */\n    setInternalValueFromOptions(value) {\n      if (Array.isArray(value)) {\n        this.$data._value = value.map(val => this.findOptionFromReducedValue(val));\n      } else {\n        this.$data._value = this.findOptionFromReducedValue(value);\n      }\n    },\n\n    /**\n     * Select a given option.\n     * @param  {Object|String} option\n     * @return {void}\n     */\n    select(option) {\n      if (!this.isOptionSelected(option)) {\n        if (this.taggable && !this.optionExists(option)) {\n          option = this.createOption(option);\n          this.$emit('option:created', option);\n        }\n        if (this.multiple) {\n          option = this.selectedValue.concat(option)\n        }\n        this.updateValue(option);\n      }\n\n      this.onAfterSelect(option)\n    },\n\n    /**\n     * De-select a given option.\n     * @param  {Object|String} option\n     * @return {void}\n     */\n    deselect (option) {\n      this.updateValue(this.selectedValue.filter(val => {\n        return !this.optionComparator(val, option);\n      }));\n    },\n\n    /**\n     * Clears the currently selected value(s)\n     * @return {void}\n     */\n    clearSelection() {\n      this.updateValue(this.multiple ? [] : null)\n    },\n\n    /**\n     * Called from this.select after each selection.\n     * @param  {Object|String} option\n     * @return {void}\n     */\n    onAfterSelect(option) {\n      if (this.closeOnSelect) {\n        this.open = !this.open\n        this.searchEl.blur()\n      }\n\n      if (this.clearSearchOnSelect) {\n        this.search = ''\n      }\n    },\n\n    /**\n     * Accepts a selected value, updates local\n     * state when required, and triggers the\n     * input event.\n     *\n     * @emits input\n     * @param value\n     */\n    updateValue (value) {\n      if (this.isTrackingValues) {\n        // Vue select has to manage value\n        this.$data._value = value;\n      }\n\n      if (value !== null) {\n        if (Array.isArray(value)) {\n          value = value.map(val => this.reduce(val));\n        } else {\n          value = this.reduce(value);\n        }\n      }\n\n      this.$emit('input', value);\n    },\n\n    /**\n     * Toggle the visibility of the dropdown menu.\n     * @param  {Event} e\n     * @return {void}\n     */\n    toggleDropdown ({target}) {\n      //  don't react to click on deselect/clear buttons,\n      //  they dropdown state will be set in their click handlers\n      const ignoredButtons = [\n        ...(this.$refs['deselectButtons'] || []),\n        ...([this.$refs['clearButton']] || [])\n      ];\n\n      if (ignoredButtons.some(ref => ref.contains(target) || ref === target)) {\n        return;\n      }\n\n      if (this.open) {\n        this.searchEl.blur();\n      } else if (!this.disabled) {\n        this.open = true;\n        this.searchEl.focus();\n      }\n    },\n\n    /**\n     * Check if the given option is currently selected.\n     * @param  {Object|String}  option\n     * @return {Boolean}        True when selected | False otherwise\n     */\n    isOptionSelected(option) {\n      return this.selectedValue.some(value => {\n        return this.optionComparator(value, option)\n      })\n    },\n\n    /**\n     * Determine if two option objects are matching.\n     *\n     * @param value {Object}\n     * @param option {Object}\n     * @returns {boolean}\n     */\n    optionComparator(value, option) {\n      if (typeof value !== 'object' && typeof option !== 'object') {\n        // Comparing primitives\n        if (value === option) {\n          return true\n        }\n      } else {\n        // Comparing objects\n        if (value === this.reduce(option)) {\n          return true\n        }\n        if ((this.getOptionLabel(value) === this.getOptionLabel(option)) || (this.getOptionLabel(value) === option)) {\n          return true\n        }\n        if (this.reduce(value) === this.reduce(option)) {\n          return true\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Finds an option from this.options\n     * where a reduced value matches\n     * the passed in value.\n     *\n     * @param value {Object}\n     * @returns {*}\n     */\n    findOptionFromReducedValue (value) {\n      return this.options.find(option => JSON.stringify(this.reduce(option)) === JSON.stringify(value)) || value;\n    },\n\n    /**\n     * 'Private' function to close the search options\n     * @emits  {search:blur}\n     * @returns {void}\n     */\n    closeSearchOptions(){\n      this.open = false\n      this.$emit('search:blur')\n    },\n\n    /**\n     * Delete the value on Delete keypress when there is no\n     * text in the search input, & there's tags to delete\n     * @return {this.value}\n     */\n    maybeDeleteValue() {\n      if (!this.searchEl.value.length && this.selectedValue && this.clearable) {\n        let value = null;\n        if (this.multiple) {\n          value = [...this.selectedValue.slice(0, this.selectedValue.length - 1)]\n        }\n        this.updateValue(value)\n      }\n    },\n\n    /**\n     * Determine if an option exists\n     * within this.optionList array.\n     *\n     * @param  {Object || String} option\n     * @return {boolean}\n     */\n    optionExists(option) {\n      return this.optionList.some(opt => {\n        if (typeof opt === 'object' && this.getOptionLabel(opt) === option) {\n          return true\n        } else if (opt === option) {\n          return true\n        }\n        return false\n      })\n    },\n\n    /**\n     * Ensures that options are always\n     * passed as objects to scoped slots.\n     * @param option\n     * @return {*}\n     */\n    normalizeOptionForSlot (option) {\n      return (typeof option === 'object') ? option : {[this.label]: option};\n    },\n\n    /**\n     * If push-tags is true, push the\n     * given option to `this.pushedTags`.\n     *\n     * @param  {Object || String} option\n     * @return {void}\n     */\n    maybePushTag(option) {\n      if (this.pushTags) {\n        this.pushedTags.push(option)\n      }\n    },\n\n    /**\n     * If there is any text in the search input, remove it.\n     * Otherwise, blur the search input to close the dropdown.\n     * @return {void}\n     */\n    onEscape() {\n      if (!this.search.length) {\n        this.searchEl.blur()\n      } else {\n        this.search = ''\n      }\n    },\n\n    /**\n     * Close the dropdown on blur.\n     * @emits  {search:blur}\n     * @return {void}\n     */\n    onSearchBlur() {\n      if (this.mousedown && !this.searching) {\n        this.mousedown = false\n      } else {\n        const { clearSearchOnSelect, multiple } = this;\n        if (this.clearSearchOnBlur({ clearSearchOnSelect, multiple })) {\n          this.search = ''\n        }\n        this.closeSearchOptions()\n        return\n      }\n      // Fixed bug where no-options message could not be closed\n      if (this.search.length === 0 && this.options.length === 0){\n        this.closeSearchOptions()\n        return\n      }\n    },\n\n    /**\n     * Open the dropdown on focus.\n     * @emits  {search:focus}\n     * @return {void}\n     */\n    onSearchFocus() {\n      this.open = true\n      this.$emit('search:focus')\n    },\n\n    /**\n     * Event-Handler to help workaround IE11 (probably fixes 10 as well)\n     * firing a `blur` event when clicking\n     * the dropdown's scrollbar, causing it\n     * to collapse abruptly.\n     * @see https://github.com/sagalbot/vue-select/issues/106\n     * @return {void}\n     */\n    onMousedown() {\n      this.mousedown = true\n    },\n\n    /**\n     * Event-Handler to help workaround IE11 (probably fixes 10 as well)\n     * @see https://github.com/sagalbot/vue-select/issues/106\n     * @return {void}\n     */\n    onMouseUp() {\n      this.mousedown = false\n    },\n\n    /**\n     * Search <input> KeyBoardEvent handler.\n     * @param e {KeyboardEvent}\n     * @return {Function}\n     */\n    onSearchKeyDown (e) {\n      const preventAndSelect = e => {\n        e.preventDefault();\n        return !this.isComposing && this.typeAheadSelect();\n      };\n\n      const defaults = {\n        //  delete\n        8: e => this.maybeDeleteValue(),\n        //  tab\n        9: e => this.onTab(),\n        //  esc\n        27: e => this.onEscape(),\n        //  up.prevent\n        38: e => {\n          e.preventDefault();\n          return this.typeAheadUp();\n        },\n        //  down.prevent\n        40: e => {\n          e.preventDefault();\n          return this.typeAheadDown();\n        },\n      };\n\n      this.selectOnKeyCodes.forEach(keyCode => defaults[keyCode] = preventAndSelect);\n\n      const handlers = this.mapKeydown(defaults, this);\n\n      if (typeof handlers[e.keyCode] === 'function') {\n        return handlers[e.keyCode](e);\n      }\n    }\n  },\n\n  computed: {\n    /**\n     * Determine if the component needs to\n     * track the state of values internally.\n     * @return {boolean}\n     */\n    isTrackingValues () {\n      return typeof this.value === 'undefined' || this.$options.propsData.hasOwnProperty('reduce');\n    },\n\n    /**\n     * The options that are currently selected.\n     * @return {Array}\n     */\n    selectedValue () {\n      let value = this.value;\n\n      if (this.isTrackingValues) {\n        // Vue select has to manage value internally\n        value = this.$data._value;\n      }\n\n      if (value) {\n        return [].concat(value);\n      }\n\n      return [];\n    },\n\n    /**\n     * The options available to be chosen\n     * from the dropdown, including any\n     * tags that have been pushed.\n     *\n     * @return {Array}\n     */\n    optionList () {\n      return this.options.concat(this.pushedTags);\n    },\n\n    /**\n     * Find the search input DOM element.\n     * @returns {HTMLInputElement}\n     */\n    searchEl () {\n      return !!this.$scopedSlots['search']\n        ? this.$refs.selectedOptions.querySelector(this.searchInputQuerySelector)\n        : this.$refs.search;\n    },\n\n    /**\n     * The object to be bound to the $slots.search scoped slot.\n     * @returns {Object}\n     */\n    scope () {\n      return {\n        search: {\n          attributes: {\n            'disabled': this.disabled,\n            'placeholder': this.searchPlaceholder,\n            'tabindex': this.tabindex,\n            'readonly': !this.searchable,\n            'id': this.inputId,\n            'aria-expanded': this.dropdownOpen,\n            'aria-label': 'Search for option',\n            'ref': 'search',\n            'role': 'combobox',\n            'type': 'search',\n            'autocomplete': this.autocomplete,\n            'value': this.search,\n          },\n          events: {\n            'compositionstart': () => this.isComposing = true,\n            'compositionend': () => this.isComposing = false,\n            'keydown': this.onSearchKeyDown,\n            'blur': this.onSearchBlur,\n            'focus': this.onSearchFocus,\n            'input': (e) => this.search = e.target.value,\n          },\n        },\n        spinner: {\n          loading: this.mutableLoading\n        },\n        openIndicator: {\n          attributes: {\n            'ref': 'openIndicator',\n            'role': 'presentation',\n            'class': 'vs__open-indicator',\n          },\n        },\n      };\n    },\n\n    /**\n     * Returns an object containing the child components\n     * that will be used throughout the component. The\n     * `component` prop can be used to overwrite the defaults.\n     *\n     * @return {Object}\n     */\n    childComponents () {\n      return {\n        ...childComponents,\n        ...this.components\n      };\n    },\n\n    /**\n     * Holds the current state of the component.\n     * @return {Object}\n     */\n    stateClasses() {\n      return {\n        'vs--open': this.dropdownOpen,\n        'vs--single': !this.multiple,\n        'vs--searching': this.searching && !this.noDrop,\n        'vs--searchable': this.searchable && !this.noDrop,\n        'vs--unsearchable': !this.searchable,\n        'vs--loading': this.mutableLoading,\n        'vs--disabled': this.disabled\n      }\n    },\n\n    /**\n     * Return the current state of the\n     * search input\n     * @return {Boolean} True if non empty value\n     */\n    searching() {\n      return !! this.search\n    },\n\n    /**\n     * Return the current state of the\n     * dropdown menu.\n     * @return {Boolean} True if open\n     */\n    dropdownOpen() {\n      return this.noDrop ? false : this.open && !this.mutableLoading\n    },\n\n    /**\n     * Return the placeholder string if it's set\n     * & there is no value selected.\n     * @return {String} Placeholder text\n     */\n    searchPlaceholder() {\n      if (this.isValueEmpty && this.placeholder) {\n        return this.placeholder;\n      }\n    },\n\n    /**\n     * The currently displayed options, filtered\n     * by the search elements value. If tagging\n     * true, the search text will be prepended\n     * if it doesn't already exist.\n     *\n     * @return {array}\n     */\n    filteredOptions() {\n      const optionList = [].concat(this.optionList);\n\n      if (!this.filterable && !this.taggable) {\n        return optionList;\n      }\n\n      let options = this.search.length ? this.filter(optionList, this.search, this) : optionList;\n      if (this.taggable && this.search.length && !this.optionExists(this.search)) {\n        options.unshift(this.search)\n      }\n      return options\n    },\n\n    /**\n     * Check if there aren't any options selected.\n     * @return {Boolean}\n     */\n    isValueEmpty() {\n      return this.selectedValue.length === 0;\n    },\n\n    /**\n     * Determines if the clear button should be displayed.\n     * @return {Boolean}\n     */\n    showClearButton() {\n      return !this.multiple && this.clearable && !this.open && !this.isValueEmpty\n    }\n  },\n\n}\n"]},"sourceType":"module","hash":"a982863a0573fb0d444dcdc651322029fff330af"}
